#
# For auditor
#

# Name of auditor ("Scalar Auditor" by default). It is used to identify an auditor.
scalar.dl.auditor.name={{ default .Env.SCALAR_DL_AUDITOR_NAME "" }}

# Namespace of auditor tables ("auditor" by default).
scalar.dl.auditor.namespace={{ default .Env.SCALAR_DL_AUDITOR_NAMESPACE "" }}

# The authentication method for a client and Auditor servers. Use "digital-signature" (default) or "hmac".
# This has to be consistent with the client configuration.
scalar.dl.auditor.authentication.method={{ default .Env.SCALAR_DL_AUDITOR_AUTHENTICATION_METHOD "" }}

# A cipher key used to encrypt and decrypt the HMAC secret keys of client entities.
# This variable is used only when scalar.dl.auditor.authentication.method is "hmac".
# Please set an unpredictable and long enough value.
scalar.dl.auditor.authentication.hmac.cipher_key={{ default .Env.SCALAR_DL_AUDITOR_AUTHENTICATION_HMAC_CIPHER_KEY "" }}

# Server port (40051 by default).
scalar.dl.auditor.server.port={{ default .Env.SCALAR_DL_AUDITOR_SERVER_PORT "" }}

# Server privileged port (40052 by default).
scalar.dl.auditor.server.privileged_port={{ default .Env.SCALAR_DL_AUDITOR_SERVER_PRIVILEGED_PORT "" }}

# Server admin port (40053 by default).
scalar.dl.auditor.server.admin_port={{ default .Env.SCALAR_DL_AUDITOR_SERVER_ADMIN_PORT "" }}

# Prometheus exporter port (8080 by default). Prometheus exporter will not be started if a negative number is given.
scalar.dl.auditor.server.prometheus_exporter_port={{ default .Env.SCALAR_DL_AUDITOR_SERVER_PROMETHEUS_EXPORTER_PORT "" }}

# TLS between clients and servers (false by default).
scalar.dl.auditor.server.tls.enabled={{ default .Env.SCALAR_DL_AUDITOR_SERVER_TLS_ENABLED "" }}

# Certificate chain file used for TLS communication. 
# It can be empty if scalar.dl.auditor.server.tls.enabled=false .
scalar.dl.auditor.server.tls.cert_chain_path={{ default .Env.SCALAR_DL_AUDITOR_SERVER_TLS_CERT_CHAIN_PATH "" }}

# A private key file used for TLS communication.
# It can be empty if scalar.dl.auditor.server.tls.enabled=false .
scalar.dl.auditor.server.tls.private_key_path={{ default .Env.SCALAR_DL_AUDITOR_SERVER_TLS_PRIVATE_KEY_PATH "" }}

# The maximum message size allowed for a single gRPC frame.
#If an inbound message larger than this limit is received, it will not be processed, and the RPC will fail with RESOURCE_EXHAUSTED.
scalar.dl.auditor.server.grpc.max_inbound_message_size={{ default .Env.SCALAR_DL_AUDITOR_SERVER_GRPC_MAX_INBOUND_MESSAGE_SIZE "" }}

# The maximum size of metadata allowed to be received.
# This is cumulative size of the entries with some overhead, as defined for HTTP/2's SETTINGS_MAX_HEADER_LIST_SIZE. The default is 8 KiB.
scalar.dl.auditor.server.grpc.max_inbound_metadata_size={{ default .Env.SCALAR_DL_AUDITOR_SERVER_GRPC_MAX_INBOUND_METADATA_SIZE "" }}

#
# For ledger 
#

# Optional. A hostname or an IP address of the server ("localhost" by default).
# It assuems that there is a single endpoint that is given by DNS or a load balancer.
scalar.dl.auditor.ledger.host={{ default .Env.SCALAR_DL_AUDITOR_LEDGER_HOST "" }}

# Optional. A port number of the server (50051 by default). 
scalar.dl.auditor.ledger.port={{ default .Env.SCALAR_DL_AUDITOR_LEDGER_PORT "" }}

# Optional. A port number of the server for privileged services (50052 by default).
scalar.dl.auditor.ledger.privileged_port={{ default .Env.SCALAR_DL_AUDITOR_LEDGER_PRIVILEGED_PORT "" }}

# A secret key of HMAC for the authentication of messages between (Ledger and Auditor) servers. The same key has to be set in the corresponding Ledger as well.
# If this is not set, Auditor uses digital signature authentication using scalar.dl.auditor.private_key_pem/path for signing and 
# scalar.dl.auditor.ledger.cert_holder_id and its corresponding certificate (stored in the database) for verification
scalar.dl.auditor.servers.authentication.hmac.secret_key={{ default .Env.SCALAR_DL_AUDITOR_SERVERS_AUTHENTICATION_HMAC_SECRET_KEY "" }}

# This will be deleted in release 5.0.0 since Ledger-Auditor authentication will use HMAC only.
# Required. The holder ID of the certificate of Ledger ("ledger" by default).
scalar.dl.auditor.ledger.cert_holder_id={{ default .Env.SCALAR_DL_AUDITOR_LEDGER_CERT_HOLDER_ID "" }}

# This will be deleted in release 5.0.0 since Ledger-Auditor authentication will use HMAC only.
# Optional. The version of the certificate (1 by default).
# Use another bigger integer if you need to change your private key.
scalar.dl.auditor.ledger.cert_version={{ default .Env.SCALAR_DL_AUDITOR_LEDGER_CERT_VERSION "" }}

# This will be deleted in release 5.0.0 since Ledger-Auditor authentication will use HMAC only.
# Required. The holder ID of a certificate.
# It must be configured for each private key and unique in the system.
scalar.dl.auditor.cert_holder_id={{ default .Env.SCALAR_DL_AUDITOR_CERT_HOLDER_ID "" }}

# This will be deleted in release 5.0.0 since Ledger-Auditor authentication will use HMAC only.
# Optional. The version of the certificate (1 by default).
# Use another bigger integer if you need to change your private key.
scalar.dl.auditor.cert_version={{ default .Env.SCALAR_DL_AUDITOR_CERT_VERSION "" }}

# This will be deleted in release 5.0.0 since Ledger-Auditor authentication will use HMAC only.
# Required. The path of the certificate file in PEM format.
scalar.dl.auditor.cert_path={{ default .Env.SCALAR_DL_AUDITOR_CERT_PATH "" }}

# This will be deleted in release 5.0.0 since Ledger-Auditor authentication will use HMAC only.
# Required if cert_path is empty. PEM-encoded certificate data.
scalar.dl.auditor.cert_pem={{ default .Env.SCALAR_DL_AUDITOR_CERT_PEM "" }}

# The path of a private key file in PEM format. Either this or scalar.dl.auditor.proof.private_key_pem is used for signing proofs with digital signatures.
# The signatures are also used for Ledger to authenticate the corresponding proofs from Auditor if scalar.dl.auditor.servers.authentication.hmac.secret_key is empty.
scalar.dl.auditor.private_key_path={{ default .Env.SCALAR_DL_AUDITOR_PRIVATE_KEY_PATH "" }}

# PEM-encoded private key data. Either this or scalar.dl.auditor.proof.private_key_path is used for signing proofs with digital signatures.
# The signatures are also used for Ledger to authenticate the corresponding proofs from Auditor if scalar.dl.auditor.servers.authentication.hmac.secret_key is empty.
scalar.dl.auditor.private_key_pem={{ default .Env.SCALAR_DL_AUDITOR_PRIVATE_KEY_PEM "" }}

# Optional. A flag to enable TLS communication (false by default).
scalar.dl.auditor.tls.enabled={{ default .Env.SCALAR_DL_AUDITOR_TLS_ENABLED "" }}

# Optional. A custom CA root certificate for TLS communication.
# If the issuing certificate authority is known to the client, it can be empty.
scalar.dl.auditor.tls.ca_root_cert_path={{ default .Env.SCALAR_DL_AUDITOR_TLS_CA_ROOT_CERT_PATH "" }}
scalar.dl.auditor.tls.ca_root_cert_pem={{ default .Env.SCALAR_DL_AUDITOR_TLS_CA_ROOT_CERT_PEM "" }}

# Optional. A custom authority for TLS communication for Ledger. This doesn't change what the host is actually connected to.
# This is intended for testing, but may safely be used outside of tests as an alternative to DNS overrides.
# For example, you can specify the hostname presented in the certificate chain file that you set for `scalar.dl.ledger.server.tls.cert_chain_path`.
scalar.dl.auditor.tls.override_authority={{ default .Env.SCALAR_DL_AUDITOR_TLS_OVERRIDE_AUTHORITY "" }}

# Optional. An authorization credential. (e.g. authorization: Bearer token)
# If this is given, clients will add "authorization: <credential>" http/2 header.
scalar.dl.auditor.authorization.credential={{ default .Env.SCALAR_DL_AUDITOR_AUTHORIZATION_CREDENTIAL "" }}

# A deadline that is after the given duration from now for each request.
scalar.dl.auditor.grpc.deadline_duration_millis={{ default .Env.SCALAR_DL_AUDITOR_GRPC_DEADLINE_DURATION_MILLIS "" }}

# The maximum message size allowed for a single gRPC frame.
# If an inbound message larger than this limit is received, it will not be processed, and the RPC will fail with RESOURCE_EXHAUSTED.
scalar.dl.auditor.grpc.max_inbound_message_size={{ default .Env.SCALAR_DL_AUDITOR_GRPC_MAX_INBOUND_MESSAGE_SIZE "" }}

# The maximum size of metadata allowed to be received.
# This is cumulative size of the entries with some overhead, as defined for HTTP/2's SETTINGS_MAX_HEADER_LIST_SIZE. The default is 8 KiB.
scalar.dl.auditor.grpc.max_inbound_metadata_size={{ default .Env.SCALAR_DL_AUDITOR_GRPC_MAX_INBOUND_METADATA_SIZE "" }}

#
# For database
#

# Comma separated contact points
scalar.db.contact_points={{ default .Env.SCALAR_DB_CONTACT_POINTS "" }}

# Port number for all the contact points. Default port number for each database is used if empty.
scalar.db.contact_port={{ default .Env.SCALAR_DB_CONTACT_PORT "" }}

# Credential information to access the database
scalar.db.username={{ default .Env.SCALAR_DB_USERNAME "" }}
scalar.db.password={{ default .Env.SCALAR_DB_PASSWORD "" }}

# Storage implementation. Either cassandra or cosmos can be set. Default storage is cassandra.
scalar.db.storage={{ default .Env.SCALAR_DB_STORAGE "" }}

# Default isolation level. Either SNAPSHOT or SERIALIZABLE can be specified. SNAPSHOT is used by default.
scalar.db.isolation_level={{ default .Env.SCALAR_DB_ISOLATION_LEVEL "" }}

# Default serializable strategy for ConsensusCommit transaction manager.
# Either EXTRA_READ or EXTRA_WRITE can be specified. EXTRA_READ is used by default.
# If SNAPSHOT is specified, this is ignored.
scalar.db.consensuscommit.serializable_strategy={{ default .Env.SCALAR_DB_CONSENSUSCOMMIT_SERIALIZABLE_STRATEGY "" }}

# License key
scalar.dl.licensing.license_key={{ default .Env.SCALAR_DL_LICENSING_LICENSE_KEY "" }}
scalar.dl.licensing.license_check_cert_path=/scalar/license-cert.pem
