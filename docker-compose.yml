version: "3.5"
services:
  cassandra:
    image: cassandra:3.11
    container_name: "scalardl-samples-cassandra-1"
    volumes:
      - cassandra-data:/var/lib/cassandra
    # ports:
    #   - "7199:7199" # JMX
    #   - "7000:7000" # cluster communication
    #   - "7001:7001" # cluster communication (SSL)
    #   - "9042:9042" # native protocol clients
    #   - "9160:9160" # thrift clients
    environment:
      - CASSANDRA_DC=dc1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    networks:
      - scalar-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh < /dev/null || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 60
      start_period: 30s

  scalardl-ledger-schema-loader-cassandra:
    image: ghcr.io/scalar-labs/scalardl-schema-loader:3.9.2
    volumes:
      - ./scalardb.properties:/scalardb.properties
    depends_on:
      cassandra:
        condition: service_healthy
    command:
      - "-c"
      - "/scalardb.properties"
      - "--coordinator"
      - "--replication-factor"
      - "1"
    networks:
      - scalar-network
    restart: on-failure

  scalar-ledger:
    image: ghcr.io/scalar-labs/scalardl-ledger-byol:3.9.2
    container_name: "scalardl-samples-scalar-ledger-1"
    volumes:
      - ./fixture/ledger-key.pem:/scalar/ledger-key.pem
      - ./fixture/ledger.properties.tmpl:/scalar/ledger/ledger.properties.tmpl
      - ./fixture/trial-license-cert.pem:/scalar/license-cert.pem
      # If you have a commercial license key, you must use `commercial-license-cert.pem` instead of `trial-license-cert.pem`.
      # - ./fixture/commercial-license-cert.pem:/scalar/license-cert.pem
    depends_on:
      scalardl-ledger-schema-loader-cassandra:
        condition: service_completed_successfully
    environment:
      - SCALAR_DB_CONTACT_POINTS=cassandra
      - SCALAR_DB_STORAGE=cassandra
      - SCALAR_DL_LEDGER_PROOF_ENABLED=true
      - SCALAR_DL_LEDGER_PROOF_PRIVATE_KEY_PATH=/scalar/ledger-key.pem

      ##### PLEASE REPLACE THIS VALUE WITH YOUR LICENSE KEY #####
      - SCALAR_DL_LICENSING_LICENSE_KEY=<SET_YOUR_LICENSE_KEY>
      ##### PLEASE REPLACE THIS VALUE WITH YOUR LICENSE KEY #####

    networks:
      - scalar-network
    healthcheck:
      test: ["CMD-SHELL", "grpc_health_probe -addr=localhost:50051 && grpc_health_probe -addr=ledger-envoy:50051 || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 60
      start_period: 10s

  ledger-envoy:
    image: ghcr.io/scalar-labs/scalar-envoy:1.5.0
    container_name: "scalardl-samples-ledger-envoy-1"
    ports:
      - "9901:9901"
      - "50051:50051"
      - "50052:50052"
    depends_on:
      scalar-ledger:
        condition: service_started
    environment:
      - admin_access_log_path=/dev/stdout
      - scalardl_address=scalar-ledger
      - service_listeners=scalar-service:50051,scalar-privileged:50052
      - envoy_tls=false
    networks:
      - scalar-network

  cfssl-init:
    # This service should be run separately before two services below
    # (cfssl-serve and cfssl-ocspserve) with `depends_on` option, because if
    # they start up at the same time (by commands like `docker-compose up`),
    # they both attempt to generate the same missing certificate files, which
    # results in a race condition.
    image: ghcr.io/scalar-labs/scalar-cfssl:1.0.0
    container_name: "scalardl-samples-cfssl-init-1"
    volumes:
      - ./cfssl/data:/cfssl/data
    command: /bin/true
    networks:
      - scalar-network

  cfssl-serve:
    image: ghcr.io/scalar-labs/scalar-cfssl:1.0.0
    container_name: "scalardl-samples-cfssl-serve-1"
    volumes:
      - ./cfssl/data:/cfssl/data
    depends_on:
      - cfssl-init
    command: serve
    ports:
      - "8888:8888"
    networks:
      - scalar-network

  cfssl-ocspserve:
    image: ghcr.io/scalar-labs/scalar-cfssl:1.0.0
    container_name: "scalardl-samples-cfssl-ocspserve-1"
    volumes:
      - ./cfssl/data:/cfssl/data
    depends_on:
      - cfssl-init
    command: ocspserve
    ports:
      - "8889:8889"
    networks:
      - scalar-network

volumes:
  cassandra-data:

networks:
  scalar-network:
    name: scalar-network
